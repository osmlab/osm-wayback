#!/usr/local/bin/python3

import os, sys, json, pprint

print("Running History Validation based on custom criteria outlined in validation_criteria.json")

criteria = json.load(open("validation_criteria.json",'r'))

# pprint.pprint(criteria)

# Let's start with Phuket, because we know that one well.

ways = list(criteria['Phuket']['ways'].keys())

target = criteria['Phuket']

#Check that in == out:
num_lines_in = sum(1 for line in open("geojson/Phuket.geojsonl"))
num_lines_out = sum(1 for line in open("history-geojson/Phuket-history.geojson"))

print("\nChecking num lines in == num lines out...", end="")
assert(num_lines_in == num_lines_out)
print(" True!")

inFile = open("history-geojson/Phuket-history.geojson")

lineIdx = 0
keep_going = True
while(keep_going):
    lineIdx += 1
    try:
        line = inFile.readline()

        if line is not "":
            feature = json.loads(line)
        else:
            keep_going = False

        if str(feature["properties"]["@id"]) in ways:
            this_way = str(feature["properties"]["@id"])
            print("Validating Way: ", this_way)

            try:
                assert (feature["properties"]["@history"] == target['ways'][this_way]["history"])
                print("T...", this_way)
            except AssertionError:
                print("F...", this_way)

                pprint.pprint(feature["properties"]["@history"])
                pprint.pprint(target['ways'][this_way]["history"])


    except UnicodeDecodeError:
        print("Parsing Error")
        print("Cannot Read Line: ", lineIdx)
        sys.exit(1)

    except json.JSONDecodeError:
        print("JSON Parsing Error on Line", lineIdx)
        print(line)
        sys.exit(1)

    # If we get down here, at least we can actually parse the file!

    #TODO: Hanlde assertions more gracefully


print("DONE")
